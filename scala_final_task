object StringProcessor {
  def processStrings(strings: List[String]): List[String] = {
    // ИСПРАВЛЕНИЕ 1: Заменяем императивный цикл и изменяемую переменную на функциональные операции
    // Используем filter для отбора строк длиной больше 3 символов
    // и map для преобразования оставшихся строк в верхний регистр
    strings
      .filter(str => str.length > 3)    // Фильтруем строки по длине
      .map(str => str.toUpperCase)      // Преобразуем каждую строку в верхний регистр
  }

  def main(args: Array[String]): Unit = {
    val strings = List("apple", "cat", "banana", "dog", "elephant")
    val processedStrings = processStrings(strings)
    println(s"Processed strings: $processedStrings")
  }
}

// Что было изменено:

// Убрана изменяемая переменная result - вместо использования var result и постепенного наполнения списка, теперь используется цепочка неизменяемых операций.

// Заменен императивный цикл for на функциональные операции:

// filter - отбирает только те строки, которые удовлетворяют условию (длина > 3)

// map - применяет функцию преобразования (toUpperCase) к каждому элементу отфильтрованного списка

// Убраны побочные эффекты - оригинальный код изменял состояние переменной result в цикле, что является побочным эффектом. Функциональная версия не имеет побочных эффектов.

// Преимущества функционального стиля:

// Код стал более декларативным и выразительным

// Отсутствуют изменяемые состояния, что делает код более предсказуемым

// Легче тестировать и рассуждать о поведении функции

// Лучшая композируемость
